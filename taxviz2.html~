
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8">
		<script src="//code.jquery.com/jquery-1.10.2.js"></script>
		<script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.5/d3.min.js"></script>
		<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
		<style>
			#inputs { float:left; }
			#viz { padding-left:50px; float:left; }
			
			.axis path,
			.axis line {
				fill: none;
				stroke: black;
				shape-rendering: crispEdges;
			}
            .axis text {
                font-family: sans-serif;
                font-size: 11px;
            }
		</style>
    </head>
    <body>
		<div id="inputs">
			<h3>Enter info!</h3>
			<p>
				<label for="earned_income" 
					style="display: inline-block; text-align: left">
					earned income (and short-term capital gains) = <span id="earned_income-value"></span>
				</label>
				<input type="number" min="20000" max="500000" step="1000" value="50000" id="earned_income">
			</p>
			<p>
				<label for="ltcg" 
					style="display: inline-block; text-align: left">
					long-term capital gains = <span id="ltcg-value"></span>
				</label>
				<input type="number" min="0" max="500000" step="1000" value="0" id="ltcg">
			</p>
			<p>
				<label for="exemptions" 
					style="display: inline-block; text-align: left">
					personal exemptions = <span id="exemp-value"></span>
				</label>
				<input type="number" min="0" max="10" step="1" value="1" id="exemptions">
			</p>
			<p>
				<label for="deductions" 
					style="display: inline-block; text-align: left">
					deductions = <span id="deduct-value"></span>
				</label>
				<input type="number" min="6300" max="500000" step="100" value="6300" id="deductions">
			</p>
		</div>
		<div id="viz">
			<h3>Viz will be here!</h3>
		</div>
        <script type="text/javascript">
            
			// Initial variables
			var width = 600;
			var height = 600;
			var bar_height = 400;
			var y_padding = 80;
			var line_width = 5;
							
			// Initialize input object
			var inputs = {
			    earned_income: 50000,
				ltcg: 0,
				exemptions: 1,
				deductions: 6300,
				// Set static tax values object
				reg: {
    			    income_tax_brackets: [
    			        {cap: 9275, rate: 10},
    			        {cap: 37650, rate: 15},
    			        {cap: 91150, rate: 25},
    			        {cap: 190150, rate: 28},
    			        {cap: 413350, rate: 33}
    			    ],
	    		    ltcg_tax_brackets: [
	    		        {cap: 37650, rate: 0},
	    		        {cap: 413350, rate: 15}
	    		    ],
	    		    fica_tax_brackets: [
	    		        {cap: 118500, rate: 7.65},
	    		        {cap: 1000000, rate: 1.45}
	    		        ],
	    		    personal_exemption_value: 4050
	    		}
	        };
			
			// Utility functions
			
			function add(a, b) {
				return a + b;
			};
			
			function get_taxable_income(inputs) {
			    return Math.max(
			        inputs.earned_income - inputs.deductions -
			        (inputs.exemptions * inputs.reg.personal_exemption_value),
			        0);
			};
			
			function get_tax_brackets(taxable_income, brackets) {
			    var n_brackets = brackets
			                     .map(function(x) {return (taxable_income > x.cap)})
			                     .reduce(add, 0);
			    return brackets.slice(0, n_brackets + 1);
			};
			
			function get_tax(taxable_income, brackets) {
			
			};
			
			function get_marginal_tax() {
			
			};
			
			function get_average_tax() {
			
			};
			
			
			// Function to generate calculated values
			function calculated_values(inputs) {
			    var calc = new Object();
			    calc.taxable_income = get_taxable_income(inputs);
			    calc.income_tax =
			        get_tax_brackets(calc.taxable_income, inputs.reg.income_tax);
//			        marginal: ,
//			        average: ,
//			        due: };
			    calc.fica =
			        get_tax_brackets(inputs.earned_income, inputs.reg.fica_tax);
//			        marginal: ,
//			        average:  ,
//			        due: };
			    calc.ltcg = 
			        get_tax_brackets(calc.taxable_income + inputs.ltcg, inputs.reg.ltcg_tax);
//			        marginal:  ,
//			        due: };
//			    calc.net = {
//			        earned_income: ,
//			        ltcg: };
			    
			    
			    return calc;
			};
			
			// Initialize things
            var svg = d3.select("#viz")
			            .append("svg")
			            .attr("width", width)
			            .attr("height", height);
				
			// Generate scale            
			var barScale = d3.scale.linear()
		                       .domain([0, inputs.earned_income * 1.05])
			    		       .range([bar_height, 0]);
			
			// Generate axis and call it on axis group			       
			var yAxis = d3.svg.axis()
			            .orient("left")
			            .ticks(5)
			            .scale(barScale)
			            .tickSize(-width, 1, 1)//.tickFormat("")
			            ;
			svg.append("g")
               .attr("class", "yaxis")
               .attr("transform", "translate("+y_padding+",0)")
               .call(yAxis);
			
			
			// Function to regenerate after  values change.
			function update(inputs) {
			 
			    // Add feature to stop if update called again with x microseconds, so it only begins running when you're done moving inputs.
			
			    // Update dollar to pixel scale, then axis
		        barScale.domain([0, inputs.earned_income * 1.05]);
                
                svg.select(".yaxis")
                   .transition().duration(1500).ease("sin-in-out")  // https://github.com/mbostock/d3/wiki/Transitions#wiki-d3_ease
                   .call(yAxis); 
					
			    // Recalculate calculated values

			}
							
			
			//=================================================================			
			// On input, update variables and regenerate
			d3.select("#earned_income").on("input", function() {
				inputs.earned_income = +this.value;
				update(inputs);
				});
			d3.select("#ltcg").on("input", function() {
				inputs.ltcg = +this.value;
				update(inputs);
				});
			d3.select("#exemptions").on("input", function() {
				inputs.exemptions = +this.value;
				update(inputs);
				});
			d3.select("#deductions").on("input", function() {
				inputs.deductions = +this.value;
				update(inputs);
				});

			
        </script>
    </body>
</html>
